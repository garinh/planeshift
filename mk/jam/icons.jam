#============================================================================
# Copyright (C)2006-2010 by Frank Richter
#
#    This library is free software; you can redistribute it and/or modify it
#    under the terms of the GNU Library General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or (at your
#    option) any later version.
#
#    This library is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
#    License for more details.
#
#    You should have received a copy of the GNU Library General Public License
#    along with this library; if not, write to the Free Software Foundation,
#    Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#============================================================================
if $(CMD.RSVG) != ""
{
  ## IconsFromSVG iconname
  ##   Generate multiple PNG images suitable for icon use from an SVG file.
  ##   The source SVG file is expected to have the name 
  ##   icons-src/scalable/<iconname>.svg. The result files are named
  ##   the icons/<size>/<iconname>.png for multiple common icon sizes as
  ##   'size'. These "common sizes" include suitable sizes for icons on Linux
  ##   desktops, Windows and MacOS/X.
  ##   Images for certain sizes can be specified as 
  ##   icons-src/<size>/<iconname>.png files; these are preferred over the
  ##   automatically generated ones.
  ##   The actual conversion is done when the "generateicons" target is
  ##   invoked.
  rule IconsFromSVG
  {
    local icon = $(1) ;
    local iconfile = $(icon).svg ;
    local svgscalabledir = [ ConcatDirs $(SUBDIR) icons-src scalable ] ;
    local svgsource = $(iconfile:G=$(svgscalabledir)) ;
    SEARCH on $(svgsource) = $(svgscalabledir) ;
    
    NotFile generateicons ;
    
    local size ;
    # Icon sizes to generate/use:
    # 16 - Windows small icon (Window menu, start menu)
    # 22 - Small icon for KDE and GNOME menus
    # 24 - Small icon for GNOME file lists(1)
    # 32 - Normal icon for Windows
    # 48 - Large icon for Windows XP
    # 256 - Windows Vista icon(2)
    # 512 - MacOS/X(3)
    #
    # (1) - Can be generated from 22x22 pics by adding a border.
    # (2) - Cause icon files to be really large. Vista supports PNG compression
    #       in icons and uses it for the 256x256 versions.
    # (3) - OS/X 10.5 and newer. Older versions used 128x128, but seem to
    #       handle the larger icons just fine (tested on 10.4 by Eric).
    for size in 16 22 32 48 256 512
    {
      local pngdir = [ ConcatDirs $(SUBDIR) icons $(size) ] ;
      local pngfile = $(icon:G=$(pngdir)).png ;
      MakeLocate $(pngfile) : $(pngdir) ;
      
      SIZE on $(pngfile) = $(size) ;
      Depends $(pngfile) : $(svgsource) ;
      CreateIcon $(pngfile) : $(svgsource) ;
      
      Depends generateicons : $(pngfile) ;
      Always $(pngfile) ;
    }
    
    # size 24 icons are a special case, see above
    local pngdir = [ ConcatDirs $(SUBDIR) icons 24 ] ;
    local pngfile = $(icon:G=$(pngdir)).png ;
    if $(CMD.CONVERT) != ""
    {
      MakeLocate $(pngfile) : $(pngdir) ;
      Depends $(pngfile) : $(svgsource) ;
      CreateIcon24 $(pngfile) : $(svgsource) ;
      
      Depends generateicons : $(pngfile) ;
      Always $(pngfile) ;
    }
    else
    {
      Echo "ImageMagick not available, $(pngfile) not regenerated" ;
    }
  }
  
  actions CreateIcon
  {
    SIZEDICONSSRC=`dirname $(>)`/../$(SIZE)
    ICONBASE=`basename $(>) .svg`
    if [ -e $SIZEDICONSSRC/$ICONBASE.png ] ; then
      $(CP) $SIZEDICONSSRC/$ICONBASE.png $(<)
    else
      if [ -e $SIZEDICONSSRC/$ICONBASE.svg ] ; then
	$(CMD.RSVG) -f png -w $(SIZE) -h $(SIZE)  $SIZEDICONSSRC/$ICONBASE.svg $(<).tmp
      else
	$(CMD.RSVG) -f png -w $(SIZE) -h $(SIZE)  $(>) $(<).tmp
      fi
      if [ -n "$(CMD.PNGCRUSH:E=)" ] ; then
	$(CMD.PNGCRUSH) -rem text $(<).tmp $(<)
	rm $(<).tmp
      else
	mv $(<).tmp $(<)
      fi
    fi
  }
  
  actions CreateIcon24
  {
    SIZEDICONSSRC=`dirname $(>)`/../24
    ICONBASE=`basename $(>) .svg`
    GENSIZEDICONSSRC=`dirname $(<)`/../22
    if [ -e $SIZEDICONSSRC/$ICONBASE.png ] ; then
      $(CP) $SIZEDICONSSRC/$ICONBASE.png $(<)
    else
      if [ -e $SIZEDICONSSRC/$ICONBASE.svg ] ; then
	$(CMD.RSVG) -f png -w 24 -h 24  $SIZEDICONSSRC/$ICONBASE.svg $(<).tmp
      else
	$(CMD.CONVERT) -bordercolor Transparent -border 1x1 $GENSIZEDICONSSRC/$ICONBASE.png $(<).tmp
      fi
      if [ -n "$(CMD.PNGCRUSH:E=)" ] ; then
	$(CMD.PNGCRUSH) -rem text $(<).tmp $(<)
	rm $(<).tmp
      else
	mv $(<).tmp $(<)
      fi
    fi
  }
}
else
{
  rule IconsFromSVG { }
}

if $(CMD.ICOTOOL) != ""
{
  # Pad the given argument with zeroes on the left side to a length of 3 chars.
  rule _ZeroPad
  {
    if [ Match ^([0-9][0-9])$ : $(<) ]
    {
      return 0$(<) ;
    }
    if [ Match ^([0-9])$ : $(<) ]
    {
      return 00$(<) ;
    }
    return $(<) ;
  }

  ## IconsMakeWin32ICO filename : iconname [: sizes]
  ##   Generate a Win32 ICO file from multiple PNG images, such as those
  ##   produced by IconsFromSVG.
  ##   The source images are expected to have the names
  ##   icons/<size>/<iconname>.png for the sizes specified in `sizes'.
  ##   By default, a set of common sizes is used, currently 16, 32, 48 and 256.
  ##   The ICO will also include 256 color images that are generated from
  ##   the (presumably RGBA) source PNGs and stored as 
  ##   icons/<size>/<iconname>_8.png. 
  ##   Color-reduced images for certain sizes can be specified as 
  ##   icons-src/<size>/<iconname>_8.png files; these are preferred over the
  ##   automatically reduced ones.
  ##   The actual conversion is done when the "generateicons" target is
  ##   invoked.
  rule IconsMakeWin32ICO
  { 
    local icofile = $(1) ;
    local icon = $(2) ;
    local sizes = $(3) ;
    
    if "$(sizes)" = "" { sizes = 16 32 48 256 ; }
    
    local size icons ;
    for size in $(sizes)
    {
      local pngdir = [ ConcatDirs $(SUBDIR) icons $(size) ] ;
      local pngtempdir = [ ConcatDirs $(BUILDTOP) out iconstmp $(SUBDIR) $(size) ] ;
      local pngsrcdir = [ ConcatDirs $(SUBDIR) icons-src $(size) ] ;
      local pngfile = $(icon:G=$(pngdir)).png ;
      local lowfile = $(icon:G=$(pngtempdir))_8.png ;
      NoCare $(pngfile) ;
      # <= is a string comparison in Jam, hence the 0 padding
      if [ _ZeroPad $(size) ] <= 128
      {
	icons += "$(pngfile)" ;
	if $(CMD.CONVERT) != ""
	{
	  MakeLocate $(lowfile) : $(pngtempdir) ;
	  SIZE on $(lowfile) = $(size) ;
	  
	  ReduceColorDepth $(lowfile) : $(pngfile) ;
	  Always $(lowfile) ;
	  icons += "$(lowfile)" ;
	}
      }
      else
      {
	if "$(ICOTOOL.SUPPORTS_RAW)" = "yes"
	{
	  # Special case, embed icon as PNG
	  RAW_ICONS on $(icofile) += "$(pngfile)" ;
	}
      }
    }
    
    MakeLocate $(icofile) : $(SUBDIR) ;
    Depends $(icofile) : $(icons) ;
    IcoTool $(icofile) : $(icons) ;
    Depends generateicons : $(icofile) ;
  }
  
  actions ReduceColorDepth
  {
    ICONSSRC=`dirname $(>)`/../../icons-src/$(SIZE)
    ICONBASE=`basename $(>) .png`
    if [ -e $ICONSSRC/\${ICONBASE}_8.png ] ; then
      $(CP) $ICONSSRC/\${ICONBASE}_8.png $(<)
    else
      # Makes transparency binary and reduces colors to 256
      $(CMD.CONVERT) $(>) \( +clone -fx a +matte -monochrome \) -compose CopyOpacity -composite -colors 256 +dither $(<)
    fi
  }
  
  actions IcoTool bind RAW_ICONS
  {
    SOURCES=
    for i in $(>) ; do
      if [ -a $i ] ; then
        SOURCES="$SOURCES $i"
      fi
    done
    $(CMD.ICOTOOL) -c -o $(<) $SOURCES "--raw=$(RAW_ICONS)"
  }
}
else
{
  rule IconsMakeWin32ICO { }
}
